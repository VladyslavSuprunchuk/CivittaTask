// <auto-generated />
using System;
using CivittaTask.DatabaseProvider;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CivittaTask.DatabaseProvider.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250212102647_AddDay")]
    partial class AddDay
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromDateId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToDateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromDateId")
                        .IsUnique();

                    b.HasIndex("ToDateId")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.CountryDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CountryDate");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsWorkDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DateId")
                        .HasColumnType("int");

                    b.Property<string>("HolidayType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DateId");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.HolidayDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HolidayDate");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.HolidayName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HolidayId")
                        .HasColumnType("int");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HolidayId");

                    b.ToTable("HolidayName");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.HolidayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("HolidayType");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.Country", b =>
                {
                    b.HasOne("CivittaTask.DatabaseProvider.Entities.CountryDate", "FromDate")
                        .WithOne()
                        .HasForeignKey("CivittaTask.DatabaseProvider.Entities.Country", "FromDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CivittaTask.DatabaseProvider.Entities.CountryDate", "ToDate")
                        .WithOne()
                        .HasForeignKey("CivittaTask.DatabaseProvider.Entities.Country", "ToDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromDate");

                    b.Navigation("ToDate");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.Holiday", b =>
                {
                    b.HasOne("CivittaTask.DatabaseProvider.Entities.HolidayDate", "Date")
                        .WithMany()
                        .HasForeignKey("DateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Date");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.HolidayName", b =>
                {
                    b.HasOne("CivittaTask.DatabaseProvider.Entities.Holiday", "HolidayI")
                        .WithMany("Name")
                        .HasForeignKey("HolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HolidayI");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.HolidayType", b =>
                {
                    b.HasOne("CivittaTask.DatabaseProvider.Entities.Country", "Country")
                        .WithMany("HolidayTypes")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.Region", b =>
                {
                    b.HasOne("CivittaTask.DatabaseProvider.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.Country", b =>
                {
                    b.Navigation("HolidayTypes");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("CivittaTask.DatabaseProvider.Entities.Holiday", b =>
                {
                    b.Navigation("Name");
                });
#pragma warning restore 612, 618
        }
    }
}
